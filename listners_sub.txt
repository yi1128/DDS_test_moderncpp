/*
* (c) Copyright, Real-Time Innovations, 2020.  All rights reserved.
* RTI grants Licensee a license to use, modify, compile, and create derivative
* works of the software solely for use with RTI Connext DDS. Licensee may
* redistribute copies of the software provided that all such copies are subject
* to this license. The software is provided "as is", with no warranty of any
* type, including any warranty for fitness for any purpose. RTI is under no
* obligation to maintain or support the software. RTI shall not be liable for
* any incidental or consequential damages arising out of the use or inability
* to use the software.
*/

#include <algorithm>
#include <iostream>

#include <dds/sub/ddssub.hpp>
#include <dds/core/ddscore.hpp>
#include <rti/core/cond/AsyncWaitSet.hpp>
#include <rti/util/util.hpp>  // for sleep()
#include <rti/config/Logger.hpp>  // for logging
// alternatively, to include all the standard APIs:
//  <dds/dds.hpp>
// or to include both the standard APIs and extensions:
//  <rti/rti.hpp>
//
// For more information about the headers and namespaces, see:
//    https://community.rti.com/static/documentation/connext-dds/7.0.0/doc/api/connext_dds/api_cpp2/group__DDSNamespaceModule.html
// For information on how to use extensions, see:
//    https://community.rti.com/static/documentation/connext-dds/7.0.0/doc/api/connext_dds/api_cpp2/group__DDSCpp2Conventions.html

#include "HUSS-PH.hpp"
#include "application.hpp"  // for command line parsing and ctrl-c

class MyParticipantListener
    : public dds::domain::NoOpDomainParticipantListener {
public:
    virtual void on_requested_deadline_missed(
        dds::pub::AnyDataWriter& writer,
        const dds::core::status::OfferedDeadlineMissedStatus& status)
    {
        std::cout << "ParticipantListener: on_requested_deadline_missed()"
            << std::endl;
    }

    virtual void on_offered_incompatible_qos(
        dds::pub::AnyDataWriter& writer,
        const ::dds::core::status::OfferedIncompatibleQosStatus& status)
    {
        std::cout << "ParticipantListener: on_offered_incompatible_qos()"
            << std::endl;
    }

    virtual void on_sample_rejected(
        dds::sub::AnyDataReader& the_reader,
        const dds::core::status::SampleRejectedStatus& status)
    {
        std::cout << "ParticipantListener: on_sample_rejected()" << std::endl;
    }

    virtual void on_liveliness_changed(
        dds::sub::AnyDataReader& the_reader,
        const dds::core::status::LivelinessChangedStatus& status)
    {
        std::cout << "ParticipantListener: on_liveliness_changed()"
            << std::endl;
    }


    virtual void on_sample_lost(
        dds::sub::AnyDataReader& the_reader,
        const dds::core::status::SampleLostStatus& status)
    {
        std::cout << "ParticipantListener: on_sample_lost()" << std::endl;
    }

    virtual void on_subscription_matched(
        dds::sub::AnyDataReader& the_reader,
        const dds::core::status::SubscriptionMatchedStatus& status)
    {
        std::cout << "ParticipantListener: on_subscription_matched()"
            << std::endl;
    }

    virtual void on_data_available(dds::sub::AnyDataReader& the_reader)
    {
        std::cout << "ParticipantListener: on_data_available()" << std::endl;
    }


    virtual void on_data_on_readers(dds::sub::Subscriber& sub)
    {
        // Notify DataReaders only calls on_data_available for
        // DataReaders with unread samples.
        sub.notify_datareaders();
        std::cout << "ParticipantListener: on_data_on_readers()" << std::endl;
    }

    virtual void on_inconsistent_topic(
        dds::topic::AnyTopic& topic,
        const dds::core::status::InconsistentTopicStatus& status)
    {
        std::cout << "ParticipantListener: on_inconsistent_topic()"
            << std::endl;
    }
};

class MySubscriberListener
    : public dds::sub::NoOpSubscriberListener,
    public std::enable_shared_from_this<MySubscriberListener> {
public:
    virtual void on_requested_deadline_missed(
        dds::sub::AnyDataReader& the_reader,
        const dds::core::status::RequestedDeadlineMissedStatus& status)
    {
        std::cout << "SubscriberListener: on_requested_deadline_missed()"
            << std::endl;
    }

    virtual void on_requested_incompatible_qos(
        dds::sub::AnyDataReader& the_reader,
        const dds::core::status::RequestedIncompatibleQosStatus& status)
    {
        std::cout << "SubscriberListener: on_requested_incompatible_qos()"
            << std::endl;
    }

    virtual void on_sample_rejected(
        dds::sub::AnyDataReader& the_reader,
        const dds::core::status::SampleRejectedStatus& status)
    {
        std::cout << "SubscriberListener: on_sample_rejected()" << std::endl;
    }

    virtual void on_liveliness_changed(
        dds::sub::AnyDataReader& the_reader,
        const dds::core::status::LivelinessChangedStatus& status)
    {
        std::cout << "SubscriberListener: on_liveliness_changed()" << std::endl;
    }

    virtual void on_sample_lost(
        dds::sub::AnyDataReader& the_reader,
        const dds::core::status::SampleLostStatus& status)
    {
        std::cout << "SubscriberListener: on_sample_lost()" << std::endl;
    }

    virtual void on_subscription_matched(
        dds::sub::AnyDataReader& the_reader,
        const dds::core::status::SubscriptionMatchedStatus& status)
    {
        std::cout << "SubscriberListener: on_subscription_matched()"
            << std::endl;
    }

    virtual void on_data_available(dds::sub::AnyDataReader& the_reader)
    {
        std::cout << "SubscriberListener: on_data_available()" << std::endl;
    }

    virtual void on_data_on_readers(dds::sub::Subscriber& sub)
    {
        static int count = 0;
        std::cout << "SubscriberListener: on_data_on_readers()" << std::endl;

        sub->notify_datareaders();
        if (++count > 3) {
            auto subscriber_listener = shared_from_this();
            dds::core::status::StatusMask new_mask =
                dds::core::status::StatusMask::all();
            new_mask &= ~dds::core::status::StatusMask::data_on_readers();
            sub.set_listener(subscriber_listener, new_mask);
        }
    }
};

class MyDataReaderListener
    : public dds::sub::NoOpDataReaderListener<CTRMGR_LAS_DETECTION_DATA> {
    virtual void on_requested_deadline_missed(
        dds::sub::DataReader<CTRMGR_LAS_DETECTION_DATA>& reader,
        const dds::core::status::RequestedDeadlineMissedStatus& status)
    {
        std::cout << "ReaderListener: on_requested_deadline_missed()"
            << std::endl;
    }

    virtual void on_requested_incompatible_qos(
        dds::sub::DataReader<CTRMGR_LAS_DETECTION_DATA>& reader,
        const dds::core::status::RequestedIncompatibleQosStatus& status)
    {
        std::cout << "ReaderListener: on_requested_incompatible_qos()"
            << std::endl;
    }

    virtual void on_sample_rejected(
        dds::sub::DataReader<CTRMGR_LAS_DETECTION_DATA>& reader,
        const dds::core::status::SampleRejectedStatus& status)
    {
        std::cout << "ReaderListener: on_sample_rejected()" << std::endl;
    }

    virtual void on_liveliness_changed(
        dds::sub::DataReader<CTRMGR_LAS_DETECTION_DATA>& reader,
        const dds::core::status::LivelinessChangedStatus& status)
    {
        std::cout << "ReaderListener: on_liveliness_changed()" << std::endl
            << "  Alive writers: " << status.alive_count() << std::endl;
    }

    virtual void on_sample_lost(
        dds::sub::DataReader<CTRMGR_LAS_DETECTION_DATA>& reader,
        const dds::core::status::SampleLostStatus& status)
    {
        std::cout << "ReaderListener: on_sample_lost()" << std::endl;
    }

    virtual void on_subscription_matched(
        dds::sub::DataReader<CTRMGR_LAS_DETECTION_DATA>& reader,
        const dds::core::status::SubscriptionMatchedStatus& status)
    {
        std::cout << "ReaderListener: on_subscription_matched()" << std::endl;
    }

    virtual void on_data_available(dds::sub::DataReader<CTRMGR_LAS_DETECTION_DATA>& reader)
    {
        dds::sub::LoanedSamples<CTRMGR_LAS_DETECTION_DATA> samples = reader.take();
        for (const auto& sample : samples) {
            // If the reference we get is valid data, it means we have actual
            // data available, otherwise we got metadata.
            if (sample.info().valid()) {
                std::cout << sample.data() << std::endl;
            }
            else {
                std::cout << "  Got metadata" << std::endl;
            }
        }
    }
};

void run_subscriber_application(
    unsigned int domain_id,
    unsigned int sample_count)
{
    // Create a shared pointer for the Participant Listener
    auto participant_listener = std::make_shared<MyParticipantListener>();

    // Create the participant
    dds::core::QosProvider qos_provider = dds::core::QosProvider::Default();
    dds::domain::DomainParticipant participant(domain_id, qos_provider.participant_qos("hussqos::ParticipantQos"));

    // Associate a listener to the participant using a shared pointer. It
    // will take care of setting it to NULL on destruction.
    participant.set_listener(participant_listener);

    // To customize topic QoS, use the configuration file USER_QOS_PROFILES.xml
    dds::topic::Topic<CTRMGR_LAS_DETECTION_DATA> topic(participant, "CTRMGR_LAS_DETECTION_DATA");

    // Create the subscriber and associate a listener
    dds::sub::Subscriber subscriber(participant, qos_provider.subscriber_qos());
    auto subscriber_listener = std::make_shared<MySubscriberListener>();
    subscriber.set_listener(subscriber_listener);

    // Create the DataReader and associate a listener
    dds::sub::qos::DataReaderQos reader_qos =
        qos_provider.datareader_qos("hussqosbytopic::CTRMGR_LAS_DETECTION_DATA");

    dds::sub::DataReader<CTRMGR_LAS_DETECTION_DATA> reader(subscriber, topic, reader_qos);
    auto dw_listener = std::make_shared<MyDataReaderListener>();
    reader.set_listener(dw_listener);

    // Main loop
    for (int count = 0;
        !application::shutdown_requested && (count < sample_count);
        ++count) {
        // Each "sample_count" is four seconds.
        rti::util::sleep(dds::core::Duration(4));
    }
}

int main(int argc, char* argv[])
{
    using namespace application;
    /*
    // Parse arguments and handle control-C
    auto arguments = parse_arguments(argc, argv);
    if (arguments.parse_result == ParseReturn::exit) {
        return EXIT_SUCCESS;
    }
    else if (arguments.parse_result == ParseReturn::failure) {
        return EXIT_FAILURE;
    }
    setup_signal_handlers();

    // Sets Connext verbosity to help debugging
    rti::config::Logger::instance().verbosity(arguments.verbosity);
    */
    try {
        run_subscriber_application(1, 1000);
    }
    catch (const std::exception& ex) {
        // This will catch DDS exceptions
        std::cerr << "Exception in run_subscriber_application(): " << ex.what()
            << std::endl;
        return EXIT_FAILURE;
    }

    // Releases the memory used by the participant factory.  Optional at
    // application exit
    dds::domain::DomainParticipant::finalize_participant_factory();

    return EXIT_SUCCESS;
}
